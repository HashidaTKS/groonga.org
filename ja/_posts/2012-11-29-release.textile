---
layout: post.ja
title: groonga 2.0.9リリース
description: groonga 2.0.9をリリースしました！
---

今日は "groonga勉強会「全文検索エンジンgroongaを囲む夕べ 3」":http://atnd.org/events/33070 の当日ですね。

h2. groonga 2.0.9リリース

"groonga 2.0.9":/ja/docs/news.html#release-2-0-9 をリリースしました！

今回のリリースの主なトピックは4つあります。

* snippet_html()関数の実験的なサポート
* インデックスにより関連付けられたテーブル間のネストしたインデックス検索のサポート
* インデックスを利用した高速な指定範囲検索のサポート
* geo_distance()関数で矩形近似により境界をまたぐ二点間の距離計算をサポート

それぞれの環境毎のインストール方法: "インストール":/ja/docs/install.html

h3. snippet_html()関数の実験的なサポート

今回のリリースでは、実験的ではありますが、キーワードとその周辺のテキストを抽出するためのsnippet_html()関数をサポートしました。
あくまで実験的なので今後予告なく変更する可能性があります。

snippet_html()関数は以下のような構文で使用します。

<pre>
  snippet_html(column名)
</pre>

どんな風に使えるかを具体例で説明します。以下は説明のためのスキーマ定義とサンプルデータです。

<pre>
  table_create Documents TABLE_NO_KEY
  column_create Documents content COLUMN_SCALAR Text
  table_create Terms TABLE_PAT_KEY|KEY_NORMALIZE ShortText --default_tokenizer TokenBigram
  column_create Terms documents_content_index COLUMN_INDEX|WITH_POSITION Documents content

  load --table Documents
  [
  ["content"],
  ["Groonga is a fast and accurate full text search engine based on inverted index."],
  ["Groonga is also a column-oriented database management system (DBMS)."],
  ["Mroonga was called groonga storage engine."]
  ]
</pre>

Documentsテーブルに登録したデータからキーワードgroongaを含むテキストを抽出するには以下のクエリを実行します。

<pre>
  select Documents --output_columns "snippet_html(content)" --command_version 2 --match_columns content --query "groonga" 
</pre>

上記クエリでは検索したいキーワードgroongaを @--query@ に指定し、検索対象のカラムには @--match_columns content@ としてDocumentテーブルのcontentカラムを指定します。

このとき、クエリにコマンドバージョン(@--command_version 2@)を指定する必要があります。これは、 @--ouput_columns@ で関数を呼びだすことができるようになったのは2.0.9からだからです。

結果は以下のようになり、指定したキーワードが @<span>@ タグで囲まれ、キーワード周辺のテキストとして抽出できていることがわかります。

検索結果のキーワードをハイライト表示したいときに便利な機能です。

<pre>
  [
    [0,1353893385.5454,0.000486850738525391],
    [
      [
        [3],
        [["snippet_html","null"]],
        [["<span class=\"keyword\">Groonga</span> is a fast and accurate full text search engine based on inverted index."]],
        [["<span class=\"keyword\">Groonga</span> is also a column-oriented database management system (DBMS)."]],
        [["Mroonga was called <span class=\"keyword\">groonga</span> storage engine."]]
      ]
    ]
  ]
</pre>

関数の詳細については "snippet_html()":http://groonga.org/ja/docs/reference/functions/snippet_html.html を参照してください。

h3. インデックスにより関連付けられたテーブル間のネストしたインデックス検索のサポート

今回のリリースでは複数のテーブルの間でインデックスが張られているなど、テーブル間の関連が存在する場合にインデックス名をネストして指定することで複数テーブルからまとめて検索することができるようになりました。

これだけだとわかりにくいので、例を示します。

ブログ記事を格納してるテーブルと記事に対するコメントを格納するテーブルがあるとします。

記事を格納しているテーブルには記事そのもののカラムとコメントテーブルを参照するカラムがあり、コメントテーブルにはコメントを格納するカラムと、記事テーブルへのインデックスカラムがあるとします。

これまで特定のキーワードをコメントに含む記事を探すには、コメントテーブルの全文検索と、その全文検索結果から該当記事を検索する必要がありました。

これが、参照先のインデックスカラムを指定することでまとめて検索できるようになりました。

どう使うかのサンプルを以下で示します。

サンプルのスキーマ定義は以下の通りです。

<pre>
  table_create Comments TABLE_HASH_KEY UInt32
  column_create Comments content COLUMN_SCALAR ShortText

  table_create Articles TABLE_NO_KEY
  column_create Articles content COLUMN_SCALAR Text
  column_create Articles comment COLUMN_SCALAR Comments

  table_create Lexicon TABLE_PAT_KEY|KEY_NORMALIZE ShortText --default_tokenizer TokenBigram
  column_create Lexicon articles_content COLUMN_INDEX|WITH_POSITION Articles content
  column_create Lexicon comments_content COLUMN_INDEX|WITH_POSITION Comments content

  column_create Comments article COLUMN_INDEX Articles comment
</pre>

記事とコメントのサンプルデータは以下のようにして登録します。

<pre>
  load --table Comments
  [
  {"_key": 1, "content": "I'm using groonga too!"},
  {"_key": 2, "content": "I'm using groonga and mroonga!"},
  {"_key": 3, "content": "I'm using mroonga too!"}
  ]

  load --table Articles
  [
  {"content": "Groonga is fast!", "comment": 1},
  {"content": "Groonga is useful!"},
  {"content": "Mroonga is fast!", "comment": 3}
  ]
</pre>

コメントテーブルから指定したキーワードを含むレコードを検索し、そのコメントのレコードを参照しているカラムの記事データを取得するクエリは以下のように書くことができます。

<pre>
  select Articles --match_columns comment.content --query groonga --output_columns "_id, _score, *" 
</pre>

@--match_columns@ にはArticlesテーブルのcommentカラムとCommentsテーブルのcontentカラムとをピリオドで連結して指定します。

するとCommentsテーブルのcontentカラムをまずはじめに全文検索し、該当するレコードを参照しているArticlesのcommentカラムのレコードを取得できる仕組みになっています。
(そのため、上記スキーマ定義でCommentsテーブルにインデックスカラムarticleがない場合、CommentsテーブルからArticlesテーブルを辿れないので正しい結果が得られません。)

<pre>
  [
    [0,1353903149.81632,0.000459432601928711],
    [
      [
       [1],
       [["_id","UInt32"],["_score","Int32"],["comment","Comments"],["content","Text"]],
       [1,1,1,"Groonga is fast!"]
      ]
    ]
  ]
</pre>

従来から可能であった特定のキーワードを含む記事の全文検索だけでなく、特定のキーワード(上記の場合はgroonga)を含むコメントを参照している記事を取得することができるようになりました。

h3. インデックスを利用した高速な指定範囲検索のサポート

今回のリリースでは、範囲を指定した検索をインデックスを使って高速に行えるようになりました。

どれくらい高速になったかという例を簡単なサンプルで示します。

サンプルのスキーマ定義は以下の通りです。

<pre>
  table_create Shops TABLE_HASH_KEY ShortText
  column_create Shops ranking COLUMN_SCALAR UInt32
  
  table_create Rankings TABLE_PAT_KEY UInt32
  column_create Rankings shops_ranking COLUMN_INDEX Shops ranking
</pre>

以下のようにしてお店とそのランキングの値を登録します。高速化した結果をよりわかりやすく示すために、1000万件ほどのデータを登録します。

<pre>
  load --table Shops
  [
  ...
  {"_key": "Shop98", "ranking": 98},
  {"_key": "Shop99", "ranking": 99},
  {"_key": "Carlos's shop", "ranking": 100},
  {"_key": "Alice's shop",  "ranking": 101},
  {"_key": "Bob's shop",    "ranking": 102},
  {"_key": "Shop103", "ranking": 103},
  {"_key": "Shop104", "ranking": 104},
  {"_key": "Shop105", "ranking": 105},
  ...
  ]
</pre>

お店とランキングの値が登録できたので、実際に検索してみます。ここでは、Aliceのお店よりランキングが上のお店3件を検索してみます。

範囲の指定にはrankingカラムに対して @'ranking >= 98 && ranking < 101'@ として表現します。

実際の検索結果は以下のようになります。(groonga 2.0.8の場合)

<pre>
  select Shops --filter 'ranking >= 98 && ranking < 101'
  [
    [0,1355461536.3541,3.55056285858154],
    [
      [
        [3],
        [["_id","UInt32"],["_key","ShortText"],["ranking","UInt32"]],
        [98,"Shop98",98],
        [99,"Shop99",99],
        [100,"Carlos's shop",100]
      ]
    ]
  ]
</pre>

丁度3件検索結果が取得できていることがわかります。

同じようにしてgroonga 2.0.9でも検索してみます。検索結果は以下のようになります。

<pre>
  select Shops --filter 'ranking >= 98 && ranking < 101'
  [
    [0,1355461395.8912,2.43025946617126],
    [
      [
        [3],
        [["_id","UInt32"],["_key","ShortText"],["ranking","UInt32"]],
        [98,"Shop98",98],
        [99,"Shop99",99],
        [100,"Carlos's shop",100]
      ]
    ]
  ]
</pre>

検索結果は当然同じですが、実行時間が違います。実行時間は以下の部分が該当します。

<pre>
    [0,1355461536.3541,3.55056285858154],
</pre>

groonga 2.0.8の場合は3.55056285858154秒でした。

<pre>
    [0,1355461395.8912,2.43025946617126],
</pre>

一方、groonga 2.0.9の場合は2.43025946617126秒でした。

groongaが出力する結果のフォーマット詳細については "出力形式":http://groonga.org/ja/docs/reference/command/output_format.html を参照してください。

|groongaのバージョン|groonga 2.0.8|groonga 2.0.9|
|実行時間(秒)|3.55056285858154|2.43025946617126|

2.0.9にするだけで実行時間が7割程度に短縮できていることがわかります。

測定は以下の環境で実施しました。

|CPU|Intel(R) Core i7-2640M CPU @ 2.80GHz|
|メモリ|8GB|

h3. geo_distance()関数で矩形近似により境界をまたぐ二点間の距離計算をサポート

今回のリリースでは、geo_distance()関数で子午線や日付変更線、赤道といった境界をまたいだ場合での任意の二点間の距離計算をサポートしました。

距離の近似方法にはいくつかやりかたがあります。groongaではgeo_distance関数において以下の近似方法をサポートしています。
それぞれ、速度や正確さにトレードオフが存在します。

* "矩形近似":http://groonga.org/ja/docs/reference/functions/geo_distance.html#rectangle
  二点間の地形を平面とみなして計算します。
  最も高速に距離を計算できますが、二点間の距離が離れると正確に計算できません。

* "球面近似":http://groonga.org/ja/docs/reference/functions/geo_distance.html#sphere
  二点間の地形を球面とみなして計算します。
  矩形近似より遅くなりますが、より正確に距離を計算できます。

* "楕円近似":http://groonga.org/ja/docs/reference/functions/geo_distance.html#ellipsoid
  二点間の地形を楕円体とみなして計算します。
  球面近似より遅くなりますが、より正確に距離を計算できます。

今回の機能追加は近似方法として矩形近似を選択した場合に有効です。

実際に、子午線をまたいで二点間の距離を計算するサンプルを紹介します。

以下のサンプルではパリ(フランス)からマドリード(スペイン)の距離を矩形近似で計算しています。

"175904000x8464000"と表記されているのがパリ(フランス)のミリ秒表記で、"145508000x-13291000"がマドリード(スペイン)のミリ秒表記です。

<pre>
  select Geo --output_columns distance --scorer 'distance = geo_distance("175904000x8464000", "145508000x-13291000", "rectangle")'
  [
    [
      0,
      1337566253.89858,
      0.000355720520019531
    ],
    [
      [
        [
          1
        ],
        [
          [
            "distance",
            "Int32" 
          ]
        ],
        [
          1051293
        ]
      ]
    ]
  ]
</pre>

ある点の経緯度をどのようにミリ秒表記で表わすかについては、 "組込型":http://groonga.org/ja/docs/reference/type.html に詳細を記載してあります。
  
関数の詳しい使いかたについては "geo_distance":http://groonga.org/ja/docs/reference/functions/geo_distance.html#ellipsoid のドキュメントを参照してください。

h3. さいごに

2.0.8からの詳細な変更点は "2.0.9リリース 2012/11/29":/ja/docs/news.html#release-2-0-9 を確認してください。

それでは、groongaでガンガン検索してください！
